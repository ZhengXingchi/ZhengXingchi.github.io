---
layout:     post
title:      "webpack"
subtitle:   "目前最流行的轻量化打包工具"
date:       2017-09-14
author:     "ZhengXC"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 前端开发
    - webpack
---

## Catagory

1. [Foreword](#foreword)
2. [简单入门](#简单入门)
	1. [安装webpack](#安装webpack)
	2. [创建文件夹](#创建文件夹)
	3. [创建文件](#创建文件)
	4. [运行webpack](#运行webpack)
3. [webpack进阶](#webpack进阶)
	1. [config入门](#config入门)
	2. [npm配置文件](#npm配置文件)
	3. [config深入之Source Maps](#config深入之source-maps)
	4. [config深入之构建本地服务器](#config深入之构建本地服务器)
	5. [config深入之Loaders](#config深入之loaders)
	6. [Plugins](#plugins)
	

## Foreword
[跳过废话，直接看进阶部分 ](#build)
>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。

---

## 简单入门

#### 安装webpack
```
//全局安装
npm install -g webpack
//安装在项目根目录
npm install --save-dev webpack
```





#### 创建文件夹
新建webpackdemo文件夹，并在该文件夹路径下`npm init`初始化package.json,同时新建app文件夹和public文件夹。
- app文件夹用来存放原始数据和JavaScript模块。
- public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个index.html文件）。

#### 创建文件

- index.html --放在public文件夹中;
- Greeter.js-- 放在app文件夹中;
- main.js-- 放在app文件夹中;

`index.html`
```
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
</head>
<body>
	<div id="root"></div>
	<script src="bundle.js"></script>
</body>
</html>
```

`Greeter.js`
```
module.exports=function(){
	var greet=document.createElement('div')
	greet.textContent="Hi there and greetings!"
	return greet;
}
```

`main.js`
```
const greeter=require('./Greeter.js');
document.querySelector("#root").appendChild(greeter())
```

#### 运行webpack
全局安装webpack下
```
# {extry file}处于填写入口文件的路径，本文中就是上述main.js的路径，
# {destination for bundled file}处填写打包文件的存放路径
# 填写路径的时候不用添加{}
webpack {entry file} {destination for bundled file}
```

项目目录安装webpack下
```
node_modules/.bin/webpack {entry file} {destination for bundled file}
```
<p id = "build"></p>
---


## webpack进阶

#### config入门
```
module.exports = {
	entry: __dirname + "/app/main.js",//已多次提及的唯一入口文件
	output: {
		path: __dirname + "/public",//打包后的文件存放的地方
		filename: "bundle.js"//打包后输出文件的文件名
	}
}
/*也可以写成如下格式*/
module.exports = {
    entry: "./app/main.js",
    output: {
        path:path.resolve(__dirname, './public'),
        filename: "bundle.js"
    }
}
```
>注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。


#### npm配置文件
>当webpack是局部安装的时候，在命令行中输入命令需要代码类似于node_modules/.bin/webpack这样的路径其实是比较烦人的，不过值得庆幸的是npm可以引导任务执行，

```
{
  "name": "webpack-test",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^3.5.6"
  }
}

```
>注：package.json中的script会安装一定顺序寻找命令对应位置，本地的node_modules/.bin路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。npm的start命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用npm start就可以执行其对于的命令，如果对应的此脚本名称不是start，想要在命令行中运行时，需要这样用npm run {script name}如npm run build。

#### config深入之Source Maps

|devtool选项|配置结果|
|------|------|
|source-map|在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包速度；|
|cheap-module-source-map|在一个单独的文件中生成一个不带列映射的map，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；|
|eval-source-map|使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；|
|cheap-module-eval-source-map|这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点；|

对小到中型的项目中，在开发阶段，eval-source-map是一个很好的选项。对webpack.config.js配置如下
```
module.exports = {
	devtool: 'eval-source-map',
	entry: __dirname + "/app/main.js",
	output: {
		path: __dirname + "/public", filename: "bundle.js"
	}
}
```
>cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。

#### config深入之构建本地服务器
```
npm install --save-dev webpack-dev-server
```

|devserver的配置选项|功能描述|
|:------|:------|
|contentBase|默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public"目录）|
|port|设置默认监听端口，如果省略，默认为”8080“|
|inline|设置为true，当源文件改变时会自动刷新页面|
|historyApiFallback|在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html|

**把这些命令加到webpack的配置文件中，现在的配置文件webpack.config.js如下所示**
```
module.exports = {
  devtool: 'eval-source-map',

  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  },

  devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    inline: true//实时刷新
  }
}
```
**在package.json中的scripts对象中添加如下命令，用以开启本地服务器**
```
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "webpack",
    "server": "webpack-dev-server --open"
},
```

#### config深入之Loaders
###### Babel
Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，webpack可以把其不同的包整合在一起使用。对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。


```
// npm一次性安装多个依赖模块，模块之间用空格隔开
npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react
```

在webpack配置添加
```
module.exports = {
  devtool: 'eval-source-map',

  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  },
  devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    inline: true//实时刷新
  },
	module: {
	  rules: [
		  {
			test: /(\.jsx|\.js)$/,
			  use: {
				loader: "babel-loader",
				options: {
				  presets: [ "es2015", "react" ]
				}
			  },
			  exclude: /node_modules/
		  }
	  ]
	}
}
```

在app文件夹中创建带有问候信息的JSON文件(命名为`config.json`)
```
{
  "greetText": "Hi there and greetings from JSON!"
}
```

更新后的`Greeter.js`
```
var config = require('./config.json'); 
module.exports = function() { 
  var greet = document.createElement('div'); 
  greet.textContent = config.greetText; 
  return greet; 
};
```

接下来我们使用ES6的语法，更新`Greeter.js`并返回一个React组件
```
//Greeter.js
import React, {Component} from 'react'
import config from './config.json';
class Greeter extends Component{
  render() {
    return (
      &lt;div&gt;
        {config.greetText}
      &lt;/div&gt;
    );
  }
}
export default Greeter
```

修改`main.js`如下，使用ES6的模块定义和渲染Greeter模块
```
// main.js
import React from 'react';
import {render} from 'react-dom';
import Greeter from './Greeter';
render(&lt;Greeter /&gt;, document.getElementById('root'));
```

###### Bable的配置
>Babel其实可以完全在 `webpack.config.js` 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的`webpack.config.js`文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 ".babelrc" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用`.babelrc`里的babel配置选项）

_webpack.config.js配置文件_
```
module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  },
  devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    inline: true//实时刷新
  },
  module: {
    rules: [
      {
      test: /(\.jsx|\.js)$/,
        use: {
        loader: "babel-loader"
        },
        exclude: /node_modules/
      }
    ]
  }
}
```

_.babelrc配置文件_
```
{
  "presets": ["react", "es2015"]
}
```

###### 关于CSS的loader
webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。

```
module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  },
  devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    inline: true//实时刷新
  },
  module: {
    rules: [
      {
      test: /(\.jsx|\.js)$/,
        use: {
        loader: "babel-loader"
        },
        exclude: /node_modules/
      },{
        test: /\.css$/,
        use: [
                    {
                        loader: "style-loader"
                    }, {
                        loader: "css-loader"
                    }
                ]
      }
    ]
  }
}
```
在app文件夹创建main.css文件
```
html { 
  box-sizing: border-box; 
  -ms-text-size-adjust: 100%; 
  -webkit-text-size-adjust: 100%; 
} 
*, *:before, *:after { 
  box-sizing: inherit; 
} 
body { 
  margin: 0; 
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; 
}
h1, h2, h3, h4, h5, h6, p, ul { 
  margin: 0; padding: 0; 
}
```
把main.css导入main.js中，如下
```
//main.js 
import React from 'react'; 
import {render} from 'react-dom'; 
import Greeter from './Greeter'; 
import './main.css';//使用require导入css文件 

render(<Greeter />, document.getElementById('root'));
```

###### CSS module
>CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递到所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中使用相同的类名造成冲突。

```
module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  },
  devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    inline: true//实时刷新
  },
  module: {
    rules: [
      {
      test: /(\.jsx|\.js)$/,
        use: {
        loader: "babel-loader"
        },
        exclude: /node_modules/
      },{
        test: /\.css$/,
        use: [
                    {
                        loader: "style-loader"
                    }, {
                        loader: "css-loader",
                        options:{
                          modules: true
                        }
                    }
                ]
      }
    ]
  }
}
```

在app文件夹下创建一个`Greeter.css`文件
```
.root {
  background-color: #eee;
  padding: 10px;
  border: 3px solid #ccc;
}
```
导入`.root`到Greeter.js中
```
import React, {Component} from 'react';
import config from './config.json'; 
import styles from './Greeter.css';//导入 
class Greeter extends Component{ render() { 
  return ( <div className={styles.root}>//添加类名 {config.greetText} </div> ); 
  } 
} 
export default Greeter
```


放心使用把，相同的类名也不会造成不同组件之间的污染。CSS modules 也是一个很大的主题，有兴趣的话可以去[官方文档](https://github.com/css-modules/css-modules)查看更多消息。

###### CSS预处理器
Sass 和 Less 之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，以下是常用的CSS 处理loaders:
- Less Loader
- Sass Loader
- Stylus Loader

不过其实也存在一个CSS的处理平台`-PostCSS`，它可以帮助你的CSS实现更多的功能，在其[官方文档](https://github.com/postcss/postcss)可了解更多相关知识。

举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。
首先安装`postcss-loader` 和 `autoprefixer`（自动添加前缀的插件）
```
npm install --save-dev postcss-loader autoprefixer
```

接下来，在webpack配置文件中添加`postcss-loader`，在根目录新建`postcss.config.js`,并添加如下代码之后，重新使用`npm start`打包时，你写的css会自动根据Can i use里的数据添加不同前缀了。
```
module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  },
  devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    inline: true//实时刷新
  },
  module: {
    rules: [
      {
      test: /(\.jsx|\.js)$/,
        use: {
        loader: "babel-loader"
        },
        exclude: /node_modules/
      },{
        test: /\.css$/,
        use: [
                    {
                        loader: "style-loader"
                    }, {
                        loader: "css-loader",
                        options:{
                          modules: true
                        }
                    },{
                        loader: "postcss-loader"
                    }
                ]
      }
    ]
  }
}
```

```
// postcss.config.js
module.exports = {
    plugins: [
        require('autoprefixer')
    ]
}
```
至此，本文已经谈论了处理JS的Babel和处理CSS的PostCSS的基本用法，它们其实也是两个单独的平台，配合webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins

#### Plugins
Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。

###### 使用插件的方法
要使用某个插件，我们需要通过`npm`安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码[添加版权声明的插件](https://webpack.js.org/plugins/banner-plugin/)。
```
const webpack = require('webpack');
module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",
  output: {
    path: __dirname + "/public",
    filename: "bundle.js"
  },
  devServer: {
    contentBase: "./public",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    inline: true//实时刷新
  },
  module: {
    rules: [
      {
      test: /(\.jsx|\.js)$/,
        use: {
        loader: "babel-loader"
        },
        exclude: /node_modules/
      },{
        test: /\.css$/,
        use: [
                    {
                        loader: "style-loader"
                    }, {
                        loader: "css-loader",
                        options:{
                          modules: true
                        }
                    },{
                        loader: "postcss-loader"
                    }
                ]
      }
    ]
  },
   plugins: [
        new webpack.BannerPlugin('版权所有，翻版必究')
    ]
}
```
###### HtmlWebpackPlugin
这个插件的作用是依据一个简单的index.html模板，生成一个自动引用你打包后的JS文件的新index.html。这在每次生成的js文件名称不同时非常有用（比如添加了hash值）。
```
npm install --save-dev html-webpack-plugin
```



## 参考文献
[入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f)

[深入浅出React（二）：React开发神器Webpack](http://www.infoq.com/cn/articles/react-and-webpack)

[webpack超详细配置, 使用教程(图文) ](http://blog.csdn.net/c_kite/article/details/71279853)















