---
layout:     post
title:      "100questions"
date:       2020-03-17
author:     "ZhengXC"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 前端开发
---

# 1. 写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么
```md
answer:
1. key是给每一个vnode的唯一id,可以依靠key,更准确, 更快的拿到oldVnode中对应的vnode节点。
2. 没有key的情况下可以对节点就地复用，提高性能。这种模式会带来一些隐藏的副作用，比如可能不会产生过渡效果，或者在某些节点有绑定数据（表单）状态，会出现状态错位。VUE文档也说明了 这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。
3. 在不带key的情况下，判断sameVnode时因为a.key和b.key都是undefined，对于列表渲染来说已经可以判断为相同节点然后调用patchVnode了，实际根本不会进入到答主给的else代码，也就无从谈起“带key比不带key时diff算法更高效”了。然后，官网推荐推荐的使用key，应该理解为“使用唯一id作为key”。因为index作为key，和不带key的效果是一样的。index作为key时，每个列表项的index在变更前后也是一样的，都是直接判断为sameVnode然后复用。说到底，key的作用就是更新组件时判断两个节点是否相同。相同就复用，不相同就删除旧的创建新的。
```

# 2. ['1','2','3'].map(parseInt)
=> [1 NAN NAN]
变形题
```js
let unary = fn => val => fn(val)
let parse = unary(parseInt)
console.log(['1.1', '2', '0.3'].map(parse))
=>[1,2,0]
```

# 3. 什么是防抖和节流？有什么区别？如何实现？
防抖: 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间
```js
function debounce(fn){
  let timer=null
  return function(){
    clearTimeout(timer)
    timer=setTimeout(()=>{
      fn.apply(this,arguments)
    },500)
  }
}
function sayHi() {
  console.log('防抖成功');
}
var inp = document.getElementById('inp');
inp.addEventListener('input', debounce(sayHi)); // 防抖
```

节流： 高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率

```js
function throttle(fn){
  let canRun=true
  return function(){
    if(!canRun) return
    canRun=false
    setTimeout(()=>{
      fn.apply(this.arguments)
      canRun=true
    },500)
  }
}
function sayHi(e) {
  console.log(e.target.innerWidth, e.target.innerHeight);
}
window.addEventListener('resize', throttle(sayHi));
```


# 4. 
```js
async function async1() {
    console.log('async1 start');
    await async2();
    console.log('async1 end');
}
async function async2() {
    console.log('async2');
}
console.log('script start');
setTimeout(function() {
    console.log('setTimeout');
}, 0)
async1();
new Promise(function(resolve) {
    console.log('promise1');
    resolve();
}).then(function() {
    console.log('promise2');
});
console.log('script end');
```
结果 script start=>async1 start=>async2=>promise1=>script end=>async1 end=>promise2=>setTimeout

分析：
执行一个宏任务（栈中没有就从事件队列中获取）
执行过程中如果遇到微任务，就将它添加到微任务的任务队列中
宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）
当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染
渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）
```js
async function async1() {
	console.log('async1 start');
	await async2();
	console.log('async1 end');
}
等价于
async function async1() {
	console.log('async1 start');
	Promise.resolve(async2()).then(() => {
                console.log('async1 end');
        })
}
```

## 变式一
```js
async function async1() {
    console.log('async1 start');
    await async2();
    console.log('async1 end');
}
async function async2() {
    //async2做出如下更改：
    new Promise(function(resolve) {
    console.log('promise1');
    resolve();
}).then(function() {
    console.log('promise2');
    });
}
console.log('script start');

setTimeout(function() {
    console.log('setTimeout');
}, 0)
async1();

new Promise(function(resolve) {
    console.log('promise3');
    resolve();
}).then(function() {
    console.log('promise4');
});

console.log('script end');
```

```
script start
async1 start
promise1
promise3
script end
promise2
async1 end
promise4
setTimeout
```
## 变式二
```js
async function async1() {
    console.log('async1 start');
    await async2();
    //更改如下：
    setTimeout(function() {
        console.log('setTimeout1')
    },0)
}
async function async2() {
    //更改如下：
	setTimeout(function() {
		console.log('setTimeout2')
	},0)
}
console.log('script start');

setTimeout(function() {
    console.log('setTimeout3');
}, 0)
async1();

new Promise(function(resolve) {
    console.log('promise1');
    resolve();
}).then(function() {
    console.log('promise2');
});
console.log('script end');

```
script start
async1 start
promise1
script end
promise2
setTimeout3
setTimeout2
setTimeout1


## 变式三
```js
async function a1 () {
    console.log('a1 start')
    await a2()
    console.log('a1 end')
}
async function a2 () {
    console.log('a2')
}

console.log('script start')

setTimeout(() => {
    console.log('setTimeout')
}, 0)

Promise.resolve().then(() => {
    console.log('promise1')
})

a1()

let promise2 = new Promise((resolve) => {
    resolve('promise2.then')
    console.log('promise2')
})

promise2.then((res) => {
    console.log(res)
    Promise.resolve().then(() => {
        console.log('promise3')
    })
})
console.log('script end')

```
script start
a1 start
a2
promise2
script end
promise1
a1 end
promise2.then
promise3
setTimeout



# 5
已知如下数组：
var arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];

自己笨拙的实现
```js
let temp = []
var arr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14]]]], 10];
function flat(arr) {
  for (let i = 0; i < arr.length; i++) {
    if (Array.isArray(arr[i])) {
      flat(arr[i])
    } else {
      temp.push(arr[i])
    }
  }
}
flat(arr)
console.log(temp)

console.log(new Set(temp.sort((a, b) => {
  return a - b
})))
```
大佬的实现
```js
var arr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14]]]], 10];
Array.prototype.flat = function () {
  return [].concat(...this.map(item => Array.isArray(item) ? item.flat() : item))
}
Array.prototype.unique = function () {
  return [...new Set(this)]
}
const sort = (a, b) => a - b
console.log(arr.flat().unique().sort(sort))
```
大佬二的实现
```js
[...new Set(String(arr).split(','))].sort((a, b) => a - b).map(Number)
```



# 6
最早的异步的实现应该:
1. 回调函数 缺点： 回调地狱，不利于维护
2. promise 可以链式调用了 解决了回调地狱， 但是无法取消promise 一旦开启只有pending resolve reject 不能取消
3. generator
yield next
语义化不好，不利于理解
4. async await 不是所有场景都使用 注意性能问题 可以用try catch 捕获异常，将异步代码改成同步代码，如果多个操作没有依赖性 会造成性能问题

# 7 Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？
promise构造函数是同步执行的，then方法是异步执行的
```js
const promise = new Promise((resolve, reject) => {
  console.log(1);
  resolve(5);
  console.log(2);
}).then(val => {
  console.log(val);
});

promise.then(() => {
  console.log(3);
});

console.log(4);

setTimeout(function() {
  console.log(6);
});
```
执行结果: 124536

# 情人节福利题，如何实现一个 new 
// new 的作用
// 创建一个新对象obj
// 把obj的__proto__指向fn.prototype 实现继承
// 执行构造函数，传递参数，改变this指向 Dog.call(obj, ...args)
// 最后把obj赋值
function _new(){
let constructor=Array.prototype.shift(argument)
let args=argument
let obj=Object.create(constructor.prototype)
let  ret =construcotr.apply(obj,args)
return ret instanceof Object?ret:obj
}

变形一
简述Object.create的实现
```
Object.myCreate=function(obj,properties){
  let Fn=Function(){}
  Fn.prototype=obj
  if(properties){
    Object.defineProperties(Fn,properties)
  }
  reutrn  new Fn()
}
```


# React setState 笔试题，下面的代码输出什么？
```js
class Example extends React.Component {
  constructor() {
    super();
    this.state = {
      val: 0
    };
  }
  
  componentDidMount() {
    this.setState({val: this.state.val + 1});
    console.log(this.state.val);    // 第 1 次 log  0

    this.setState({val: this.state.val + 1});
    console.log(this.state.val);    // 第 2 次 log  0

    setTimeout(() => {
      this.setState({val: this.state.val + 1});
      console.log(this.state.val);  // 第 3 次 log  2

      this.setState({val: this.state.val + 1});
      console.log(this.state.val);  // 第 4 次 log  3
    }, 0);
  }

  render() {
    return null;
  }
};
```

在React的setState函数实现中，会根据一个变量 isBatchingUpdate 来判断是直接同步更新this.state还是放到队列中异步更新 。React使用了事务的机制，React的每个生命周期和合成事件都处在一个大的事务当中。在事务的前置钩子中调用batchedUpdates方法修改isBatchingUpdates变量为true，在后置钩子中将变量置为false。原生绑定事件和setTimeout异步的函数没有进入到React的事务当中，或者当他们执行时，刚刚的事务已近结束了，后置钩子触发了，所以此时的setState会直接进入非批量更新模式，表现在我们看来成为了同步SetState。

在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用。

**原因：**在React的setState函数实现中，会根据一个变量isBatchingUpdates判断是直接更新this.state还是放到队列中回头再说，而isBatchingUpdates默认是false，也就表示setState会同步更新this.state，但是，有一个函数batchedUpdates，这个函数会把isBatchingUpdates修改为true，而当React在调用事件处理函数之前就会调用这个batchedUpdates，造成的后果，就是由React控制的事件处理过程setState不会同步更新this.state。

```md
[React] React Hooks 中使用 setTimeout #20  https://github.com/cheungseol/cheungseol.github.io/issues/20
问题
在hooks 中使用 setTimeout 方法，方法中访问到的函数 state 始终是初始值，而不是更新后的最新 state

demo
在这个例子中，首先执行setCount 将 count 设为 5， 然后经过 3 秒后执行 setCountInTimeout， 将 countInTimeout 的值设置为count 的值

我们最初期望的是 这时候 countInTimeout 就等于 此刻 count 最新的值 5， 然而 countInTimeout 却保持了最开始的 count 值 0

import React, { useEffect, useState } from 'react';

const TimeoutExample = () => {
  const [count, setCount] = useState(0);
  const [countInTimeout, setCountInTimeout] = useState(0);

  useEffect(() => {
    setTimeout(() => {
      setCountInTimeout(count); // count is 0 here
    }, 3000);
    setCount(5); // Update count to be 5 after timeout is scheduled
  }, []);

  return (
    <div>
      Count: {count}
      <br />
      setTimeout Count: {countInTimeout}
    </div>
  );
};

export default TimeoutExample;
原因
setTimeout 是一个闭包，setTimeout 函数执行的时候使用的参数 count 读取自setTimeout 函数创建的时候，即 0。 setTimeout 使用闭包的方式异步访问 count 的值。当整个函数组件re-render的时候，会创建出一个新的 setTimeout 函数一个新的闭包，但并没有改变最初封装它的那个闭包的值

作者也提到这么设计的初衷是满足这样的场景：比如订阅了一个ID，当随后需要取消订阅的时候，避免ID发生变化而造成不能取消订阅的问题

解决方法
使用一个 container 来把最新的 state 也就是 count 的值穿进去，并在随后的 timeout 函数中读取最新的 state 。

可以使用 useRef。 通过 ref's current 来同步最新的 state, 然后在 timeout 函数中读取 current 的值。使用 ref 在异步callback函数中访问最新的 当前的 state

const countRef = useRef(count);
countRef.current = count;

const getCountTimeout = () => {
  setTimeout(() => {
    setTimeoutCount(countRef.current);
  }, 2000);
};
```


# 算法题「移动零」，给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
```
function zeroMove(arr){
  for(let i=arr.len-1;i>=0;i--){
    if(arr[i]===0){
      arr.splice(i,1)
      arr.push(0)
    }
  }
}
```
```js
 function zeroMove(arr) {
    const filter = arr.filter(v => v);
    return [...filter, ...Array(arr.length - filter.length).fill(0)]
  }
```

```
首先，题意是要在原地修改数组，那么sort，concat之类的纯函数方法就是行不通的了，因为是返回新的数组，而不是在原地修改
其次，splice的时间复杂度是O(n)，那么使用splice的算法的时间复杂度是O(n2)，既然在写算法，那么就要寻求时间复杂度与空间复杂度最低的办法。
思路：双指针
设定一个慢指针一个快指针，快指针每次+1， 当慢指针的值不等于0的时候也往后移动，当慢指针等于0并且快指针不等于0的时候，交换快慢指针的值，慢指针再+1
function moveZero(arr) {
  let i = 0
  let j = 0
  while (j < arr.length) {
    if (arr[i] !== 0) {
      i++
    } else if (arr[j] !== 0) {
      ;[arr[i], arr[j]] = [arr[j], arr[i]]
      i++
    }
    j++
  }
}
时间复杂度O(n)，n是数组长度，空间复杂度O(1)
```


# 请实现一个 add 函数，满足以下功能。
```js
add(1); 			// 1
add(1)(2);  	// 3
add(1)(2)(3)；// 6
add(1)(2, 3); // 6
add(1, 2)(3); // 6
add(1, 2, 3); // 6
```





# 已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改
```
<img src="1.jpg" style="width:480px!important;”>
总结一下
1、给图片设置max-width:300px
2、给图片设置transform: scale(0.625,0.625)，但是占据的位置还是原来的480px
3、给图片设置box-sizing: border-box;padding: 0 90px;，但图片左右会有90px的内边距
4、给图片设置zoom: 0.625
5、js获取元素使用imgs[0].setAttribute("style","width:300px!important;")或者imgs[0].style.cssText='width:300px;'
6、给图片设置动画，from{width:300px;}to{width:300px;}，动画时间为0s，原理是CSS动画的样式优先级高于!important的特性
```


# 请实现一个 add 函数，满足以下功能。

```
add(1); 	// 1
add(1)(2);  	// 3
add(1)(2)(3)；  // 6
add(1)(2, 3);   // 6
add(1, 2)(3);   // 6
add(1, 2, 3);   // 6
```

1. 自己的实现方式
```js
var add = function (a, b) {
  return a + b;
}
var currying = function (fn) {
  var sum = 0
  function func(...args) {
    sum = args.reduce(fn, sum)
    return func
  }
  func.toString = () => sum
  func.valueOf = () => sum
  return func
}
var add = currying(add);
```


# 介绍下 Promise.all 使用、原理实现及错误处理

Promise.all()方法将多个Promise实例包装成一个Promise对象（p），接受一个数组（p1,p2,p3）作为参数，数组中不一定需要都是Promise对象，但是一定具有Iterator接口，如果不是的话，就会调用Promise.resolve将其转化为Promise对象之后再进行处理。
使用Promise.all()生成的Promise对象（p）的状态是由数组中的Promise对象（p1,p2,p3）决定的；
1、如果所有的Promise对象（p1,p2,p3）都变成fullfilled状态的话，生成的Promise对象（p）也会变成fullfilled状态，p1,p2,p3三个Promise对象产生的结果会组成一个数组返回给传递给p的回调函数；
2、如果p1,p2,p3中有一个Promise对象变为rejected状态的话，p也会变成rejected状态，第一个被rejected的对象的返回值会传递给p的回调函数。
Promise.all()方法生成的Promise对象也会有一个catch方法来捕获错误处理，但是如果数组中的Promise对象变成rejected状态时，并且这个对象还定义了catch的方法，那么rejected的对象会执行自己的catch方法，并且返回一个状态为fullfilled的Promise对象，Promise.all()生成的对象会接受这个Promise对象，不会返回rejected状态。
```js
function promiseAll(promises) {
  return new Promise((resolve, reject) => {
    if (!Array.isArray(promises)) {
      return reject(new TypeError('arguments must be an array'))
    }
    var num = promises.length
    var count = 0
    var arr = new Array(num)
    for (var i = 0; i < num; i++) {
      (function (i) {
        Promise.resolve(promises[i]).then(res => {
          arr[i] = res
          count++
          if (count === num) {
            resolve(arr)
          }
        }, err => reject(err))
      })(i)
    }


  })
}
var p11 = Promise.resolve(3).catch(function (err) {
  return err;
});
var p22 = Promise.reject(2)
var p33 = new Promise((resolve, reject) => {
  setTimeout(resolve, 100, "foo");
}).catch(function (err) {
  return err;
});

Promise.all([p11, p22, p33]).then(values => {
  console.log(values); // [3, 2, "foo"]
}).catch(function (err) {
  console.log(err); //不执行
});
```


# 打印出 1 - 10000 之间的所有对称数 例如 121、1331 等
```
// for (let i = 1; i < 10000; i++) {
//   let origin = '' + i
//   if (origin === origin.split('').reverse().join(''))
//     console.log(i)
// }
// Array.from({length:10000},(v,i) => i+1).slice(9).filter(item => (item+'').split('').reverse().join('') === (item+''));
for (let i = 1; i <= 10000; i++) {
  var isPalindrome = function (x) {
    if ((x < 0) || (x !== 0 && x % 10 === 0))
      return false;
    let tmp = 0;
    while (x > tmp) {
      tmp = tmp * 10 + x % 10;
      x = Math.floor(x / 10);
    }
    return x === tmp || x === Math.floor(tmp / 10);
  };
  if (isPalindrome(i)) {
    console.log(i);
  }
}
```


# Vue 的父组件和子组件生命周期钩子执行顺序是什么
```
从外到内，再从内到外
加载渲染过程
父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted
子组件更新过程
父beforeUpdate->子beforeUpdate->子updated->父updated
父组件更新过程
父beforeUpdate->父updated
销毁过程
父beforeDestroy->子beforeDestroy->子destroyed->父destroyed
```


# 输出以下代码运行结果
```
// example 1
var a={}, b='123', c=123;
a[b]='b';
a[c]='c';
console.log(a[b]);

// example 2
var a={}, b=Symbol('123'), c=Symbol('123');
a[b]='b';
a[c]='c';
console.log(a[b]);

// example 3
var a={}, b={key:'123'}, c={key:'456'};
a[b]='b';
a[c]='c';
console.log(a[b]);
```
这题考察的是对象的键名的转换。

对象的键名只能是字符串和 Symbol 类型。
其他类型的键名会被转换成字符串类型。
对象转字符串默认会调用 toString 方法。


# 使用 JavaScript Proxy 实现简单的数据绑定
```js
  <div id="root">
    <input type="text" v-model="title">
    <input type="text" v-model="title">
    <div v-bind="title"> </div>
  </div>


  let proxy = new Proxy({}, {
      get(target, key, receive) {
        return Reflect.get(target, key, receive)
      },
      set(target, key, value, receive) {
        document.querySelectorAll(`[v-model=${key}],[v-bind=${key}]`).forEach(item => {
          item.innerHTML = item.value = value
        })
        return Reflect.set(target, key, value, receive)
      }
    }
    )
    document.querySelectorAll("[v-model]").forEach(item => {
      item.addEventListener('keyup', (e) => { proxy[item.getAttribute('v-model')] = e.target.value })
    })
```


#  如何把一个字符串的大小写取反（大写变小写小写变大写），例如 ’AbC' 变成 'aBc'
```js
    const reverseStr = (str) => {
      let tmpAry = str.split('')
      let resultAry = []
      let a = 'a'.charCodeAt()
      let A = 'A'.charCodeAt()
      tmpAry.map((val) => {
        // debugger
        if (val <= 'Z' && val >= 'A') {
          resultAry.push(String.fromCharCode(val.charCodeAt() + (a - A)))
        } else if (val <= 'z' && val >= 'a') {
          resultAry.push(String.fromCharCode(val.charCodeAt() - (a - A)))
        } else {
          resultAry.push(val)
        }
      })
      return resultAry.join('')
    }
```


# 箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用 new 生成实例，那么箭头函数可以吗？为什么？
1.箭头函数没有自己的this，它的this来自于上层的作用域链，所以无法使用apply call bind绑定this
2.没有prototype，它的prototype指向undefined
3.没有绑定arguments对象，它的arguments来自于上层作用域链
4.yield 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作函数生成器
5.没有自己的 super 或 new.target
super 关键字用于访问和调用一个对象的父对象上的函数。
new.target 属性允许你检测函数或构造方法是否是通过 new 运算符被调用的


# 给定两个数组，写一个方法来计算它们的交集

这道题两种思路，空间换时间，或者不用额外空间就提升时间复杂度。

空间换时间的思路是用个Hash表来存数组1的元素以及出现的个数（此处需要遍历n次，并存一个n级别的空间）。
遍历数组2，发现数组2里有Hash表里的值就存到Result数组里，并把Hash表内该值次数减一（为0之后就Delete）。如果不存在Hash表里，就跳过。这样时间复杂度就是(m+n)
```js
let nums1 = [1, 2, 2, 1]
let nums2 = [2, 2, 1]
let arr = []
let obj = {}
for (let i = 0; i < nums1.length; i++) {
  if (obj[nums1[i]]) {
    obj[nums1[i]]++
  } else {
    obj[nums1[i]] = 1
  }
}
for (let i = 0; i < nums2.length; i++) {
  if (obj[nums2[i]]) {
    obj[nums2[i]]--
    arr.push(nums2[i])
    if (obj[nums2[i]] === 0) {
      delete obj[nums2[i]]
    }
  }
}
console.log(arr)
```
不用额外空间，就用遍历n的时候，判断值在不在m里，如果在，把m里的该值push到Result数组里，并将该值从m数组里删掉（用splice）。这样就是不用额外空间，但是提高了时间复杂度。
```js
let nums1 = [1, 2, 2, 3, 1]
let nums2 = [2, 2, 1]
let arr = []
for (let i = 0; i < nums1.length; i++) {
  for (let j = 0; j < nums2.length; j++) {
    if (nums1[i] === nums2[j]) {
      arr.push(nums1[i])
      nums2.splice(j, 1)
      j--
    }
  }
}
console.log(arr)
```



# 判断对象循环引用的方法
```
var a = { n: 1}
a.b = a;
```
大佬说(这道题也是他出的)直接用 JSON.stringify，微信小游戏的源码里面就是这么去判断.JSON.stringify 如果遇到参数里有循环引用的，就会抛出一个循环调用的错误 Uncaught TypeError: Converting circular structure to JSON
自己实现
```js
var stack = [];
function fn(obj) {
    var len;
    for (len = stack.length; len--;) {
        if (stack[len] === obj) throw TypeError()
    }
    stack.push(obj);
    for (let k in obj) {
        const value = obj[k]
        if (typeof value === 'object') fn(value);
    }
}
```

# 输出以下代码的执行结果并解释为什么
var a = {n: 1};
var b = a;
a.x = a = {n: 2};

console.log(a.x) 	
console.log(b.x)
结果:
undefined
{n:2}

首先，a和b同时引用了{n:2}对象，接着执行到a.x = a = {n：2}语句，尽管赋值是从右到左的没错，但是.的优先级比=要高，所以这里首先执行a.x，相当于为a（或者b）所指向的{n:1}对象新增了一个属性x，即此时对象将变为{n:1;x:undefined}。之后按正常情况，从右到左进行赋值，此时执行a ={n:2}的时候，a的引用改变，指向了新对象{n：2},而b依然指向的是旧对象。之后执行a.x = {n：2}的时候，并不会重新解析一遍a，而是沿用最初解析a.x时候的a，也即旧对象，故此时旧对象的x的值为{n：2}，旧对象为 {n:1;x:{n：2}}，它被b引用着。
后面输出a.x的时候，又要解析a了，此时的a是指向新对象的a，而这个新对象是没有x属性的，故访问时输出undefined；而访问b.x的时候，将输出旧对象的x的值，即{n:2}。

# Vue 的响应式原理中 Object.defineProperty 有什么缺陷？为什么在 Vue3.0 采用了 Proxy，抛弃了 Object.defineProperty？
```js
<p>请输入:</p>
<input type="text" id="input">
<input type="text" id="input2">
<p id="p"></p>
  const Vue = (function () {
      let uid = 0;
      // 用于储存订阅者并发布消息
      class Dep {
        constructor() {
          // 设置id,用于区分新Watcher和只改变属性值后新产生的Watcher
          this.id = uid++;
          // 储存订阅者的数组
          this.subs = [];
        }
        // 触发target上的Watcher中的addDep方法,参数为dep的实例本身
        depend() {
          Dep.target.addDep(this);
        }
        // 添加订阅者
        addSub(sub) {
          this.subs.push(sub);
        }
        notify() {
          // 通知所有的订阅者(Watcher)，触发订阅者的相应逻辑处理
          this.subs.forEach(sub => sub.update());
        }
      }
      // 为Dep类设置一个静态属性,默认为null,工作时指向当前的Watcher
      Dep.target = null;
      // 监听者,监听对象属性值的变化
      class Observer {
        constructor(value) {
          this.value = value;
          this.walk(value);
        }
        // 遍历属性值并监听
        walk(value) {
          Object.keys(value).forEach(key => this.convert(key, value[key]));
        }
        // 执行监听的具体方法
        convert(key, val) {
          defineReactive(this.value, key, val);
        }
      }

      function defineReactive(obj, key, val) {
        const dep = new Dep();
        // 给当前属性的值添加监听
        let chlidOb = observe(val);
        Object.defineProperty(obj, key, {
          enumerable: true,
          configurable: true,
          get: () => {
            // 如果Dep类存在target属性，将其添加到dep实例的subs数组中
            // target指向一个Watcher实例，每个Watcher都是一个订阅者
            // Watcher实例在实例化过程中，会读取data中的某个属性，从而触发当前get方法
            if (Dep.target) {
              dep.depend();
            }
            return val;
          },
          set: newVal => {
            if (val === newVal) return;
            val = newVal;
            // 对新值进行监听
            chlidOb = observe(newVal);
            // 通知所有订阅者，数值被改变了
            dep.notify();
          },
        });
      }

      function observe(value) {
        // 当值不存在，或者不是复杂数据类型时，不再需要继续深入监听
        if (!value || typeof value !== 'object') {
          return;
        }
        return new Observer(value);
      }

      class Watcher {
        constructor(vm, expOrFn, cb) {
          this.depIds = {}; // hash储存订阅者的id,避免重复的订阅者
          this.vm = vm; // 被订阅的数据一定来自于当前Vue实例
          this.cb = cb; // 当数据更新时想要做的事情
          this.expOrFn = expOrFn; // 被订阅的数据
          this.val = this.get(); // 维护更新之前的数据
        }
        // 对外暴露的接口，用于在订阅的数据被更新时，由订阅者管理员(Dep)调用
        update() {
          this.run();
        }
        addDep(dep) {
          // 如果在depIds的hash中没有当前的id,可以判断是新Watcher,因此可以添加到dep的数组中储存
          // 此判断是避免同id的Watcher被多次储存
          if (!this.depIds.hasOwnProperty(dep.id)) {
            dep.addSub(this);
            this.depIds[dep.id] = dep;
          }
        }
        run() {
          const val = this.get();
          if (val !== this.val) {
            this.val = val;
            this.cb.call(this.vm, val);
          }
        }
        get() {
          // 当前订阅者(Watcher)读取被订阅数据的最新更新后的值时，通知订阅者管理员收集当前订阅者
          Dep.target = this;
          const val = this.vm._data[this.expOrFn];
          // 置空，用于下一个Watcher使用
          Dep.target = null;
          console.log(Dep.target, 2);
          return val;
        }
      }

      class Vue {
        constructor(options = {}) {
          // 简化了$options的处理
          this.$options = options;
          // 简化了对data的处理
          let data = (this._data = this.$options.data);
          // 将所有data最外层属性代理到Vue实例上
          Object.keys(data).forEach(key => this._proxy(key));
          // 监听数据
          observe(data);
        }
        // 对外暴露调用订阅者的接口，内部主要在指令中使用订阅者
        $watch(expOrFn, cb) {
          new Watcher(this, expOrFn, cb);
        }
        _proxy(key) {
          Object.defineProperty(this, key, {
            configurable: true,
            enumerable: true,
            get: () => this._data[key],
            set: val => {
              this._data[key] = val;
            },
          });
        }
      }

      return Vue;
    })();

    let demo = new Vue({
      data: {
        text: '',
        text2: ''
      },
    });

    const p = document.getElementById('p');
    const input = document.getElementById('input');

    input.addEventListener('keyup', function (e) {
      demo.text = e.target.value;
    });
    input2.addEventListener('keyup', function (e) {
      demo.text2 = e.target.value;

    });

    demo.$watch('text', str => p.innerHTML = str);
    demo.$watch('text2', str => p.innerHTML = str);
```

# 实现 (5).add(3).minus(2) 功能
```js
 Number.prototype.add = function (number) {
      if (typeof number !== 'number') {
        throw new Error('请输入数字')
      }
      return this + number
    }
    Number.prototype.minus = function (number) {
      if (typeof number !== 'number') {
        throw new Error('请输入数字')
      }
      return this - number
    }
```


# 考察作用域的一道代码题
var a = 10;
(function () {
    console.log(a)
    a = 5
    console.log(window.a)
    var a = 20;
    console.log(a)
})()
依次输出：undefined -> 10 -> 20

解析：

在立即执行函数中，var a = 20; 语句定义了一个局部变量 a，由于js的变量声明提升机制，局部变量a的声明会被提升至立即执行函数的函数体最上方，且由于这样的提升并不包括赋值，因此第一条打印语句会打印undefined，最后一条语句会打印20。

由于变量声明提升，a = 5; 这条语句执行时，局部的变量a已经声明，因此它产生的效果是对局部的变量a赋值，此时window.a 依旧是最开始赋值的10，
 

# 下面代码中 a 在什么情况下会打印 1？
```js
var a = ?;
if(a == 1 && a == 2 && a == 3){
 	conso.log(1);
}
```
```
这个题目考察==的隐式转换吧

利用toString

let a = {
  i: 1,
  toString () {
    return a.i++
  }
}

if(a == 1 && a == 2 && a == 3) {
  console.log('1');
}
利用valueOf

let a = {
  i: 1,
  valueOf () {
    return a.i++
  }
}

if(a == 1 && a == 2 && a == 3) {
  console.log('1');
}
数组这个就有点妖了

var a = [1,2,3];
a.join = a.shift;
if(a == 1 && a == 2 && a == 3) {
  console.log('1');
}
ES6的symbol

let a = {[Symbol.toPrimitive]: ((i) => () => ++i) (0)};
if(a == 1 && a == 2 && a == 3) {
  console.log('1');
}
```


# 下面的代码打印什么内容，为什么
```js
var b = 10;
(function b() {
  b = 20;
  console.log(b)
})()
```
具名自执行函数的变量为只读属性，不可修改



# 用 JavaScript 写一个函数，输入 int 型，返回整数逆序后的字符串。如：输入整型 1234，返回字符串“4321”。要求必须使用递归函数调用，不能用全局变量，输入函数必须只有一个参数传入，必须返回字符串。
参考[二进制位运算---左移(<<)右移(>>)](https://www.jianshu.com/p/19ed5ff6a945)
```js
   function reverse(num) {
      if (typeof num !== 'number') {
        throw '输入需为int型整数'
      }
      return num / 10 >> 0 === 0 ? ('' + num) : '' + ('' + num % 10 + reverse(num / 10 >> 0))
    }
```


# 写出如下代码的打印结果 
```js
function changeObjProperty(o) {
  o.siteUrl = "http://www.baidu.com"
  o = new Object()
  o.siteUrl = "http://www.google.com"
} 
let webSite = new Object();
changeObjProperty(webSite);
console.log(webSite.siteUrl);
```
函数的形参是值的传递，传递对象的话，函数接受的是这个对象的指针。


# 模拟实现一个深拷贝，并考虑对象相互引用以及 Symbol 拷贝的情况
```js
function deepCopy(target, cache = new Set()) {
  if (typeof target !== 'object' || cache.has(target)) {
    return target
  }
  if (Array.isArray(target)) {
    target.map(t => {
      cache.add(t)
      return t
    })
  } else {
    return [...Object.keys(target), ...Object.getOwnPropertySymbols(target)].reduce((res, key) => {
      cache.add(target[key])
      res[key] = deepCopy(target[key], cache)
      return res
    }, target.constructor !== Object ? Object.create(target.constructor.prototype) : {})
  }
}
```
主要问题是

symbol作为key，不会被遍历到，所以stringify和parse是不行的
有环引用，stringify和parse也会报错
我们另外用getOwnPropertySymbols可以获取symbol key可以解决问题1，用集合记忆曾经遍历过的对象可以解决问题2。当然，还有很多数据类型要独立去拷贝。比如拷贝一个RegExp，lodash是最全的数据类型拷贝了，有空可以研究一下

另外，如果不考虑用symbol做key，还有两种黑科技深拷贝，可以解决环引用的问题，比stringify和parse优雅强一些
function deepCopyByHistory(target) {
  const prev = history.state
  history.replaceState(target, document.title)
  const res = history.state
  history.replaceState(prev, document.title)
  return res
}

async function deepCopyByMessageChannel(target) {
  return new Promise(resolve => {
    const channel = new MessageChannel()
    channel.port2.onmessage = ev => resolve(ev.data)
    channel.port1.postMessage(target)
  }).then(data => data)
}
无论哪种方法，它们都有一个共性：失去了继承关系，所以剩下的需要我们手动补上去了，故有Object.create(target.constructor.prototype)的操作


# 已知数据格式，实现一个函数 fn 找出链条中所有的父级 id
```js
   const data = [{
      id: '1',
      name: 'test1',
      children: [
        {
          id: '11',
          name: 'test11',
          children: [
            {
              id: '111',
              name: 'test111'
            },
            {
              id: '112',
              name: 'test112'
            }
          ]
        },
        {
          id: '12',
          name: 'test12',
          children: [
            {
              id: '121',
              name: 'test121',
              children: [
                {
                  id: '1221',
                  name: 'test121',
                  children: [
                    {
                      id: '12345'
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      id: '1234',
      children: [
        {
          id: '567'
        }
      ]
    }
    ]
    function bfs(target, id) {
      const quene = [...target]
      do {
        const current = quene.shift()
        if (current.children) {
          quene.push(...current.children.map(x => ({ ...x, path: (current.path || current.id) + '-' + x.id })))
        }
        if (current.id === id) {
          return current
        }
      } while (quene.length)
      return undefined
    }

    function dfs(target, id) {
      const stask = [...target]
      do {
        const current = stask.pop()
        if (current.children) {
          stask.push(...current.children.map(x => ({ ...x, path: (current.path || current.id) + '-' + x.id })))
        }
        if (current.id === id) {
          return current
        }
      } while (stask.length)
      return undefined
    }

    // 公共的搜索方法，默认bfs
    function commonSearch(target, id, mode) {
      const staskOrQuene = [...target]
      do {
        const current = staskOrQuene[mode === 'dfs' ? 'pop' : 'shift']()
        if (current.children) {
          staskOrQuene.push(...current.children.map(x => ({ ...x, path: (current.path || current.id) + '-' + x.id })))
        }
        if (current.id === id) {
          return current
        }
      } while (staskOrQuene.length)
      return undefined
    }

```

# _prop和prototype
[js中__proto__和prototype的区别和关系？](https://www.zhihu.com/question/34183746)


# bfc及其原理
[BFC及其原理解析](https://github.com/wlf1112/FE_Interview/issues/2)